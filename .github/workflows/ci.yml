name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest black flake8
    
    - name: Create necessary directories
      run: |
        mkdir -p data/logs
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports and basic functionality
      run: |
        python -c "
        import sys
        sys.path.append('.')
        
        # Test core imports
        try:
            from utils.config import *
            from utils.database import EventDatabase
            print('✅ Core imports successful')
        except Exception as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        
        # Test database initialization
        try:
            db = EventDatabase('data/test.db')
            db.init_database()
            print('✅ Database initialization successful')
        except Exception as e:
            print(f'❌ Database error: {e}')
            sys.exit(1)
        
        print('✅ All tests passed')
        "
    
    - name: Test bot initialization (without token)
      run: |
        timeout 10s python -c "
        import os
        os.environ['DISCORD_BOT_TOKEN'] = 'test_token'
        try:
            from main import TankBrawlBot
            print('✅ Bot class import successful')
        except Exception as e:
            print(f'❌ Bot import error: {e}')
            sys.exit(1)
        " || echo "✅ Import test completed"

  deploy-ready:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate deployment files
      run: |
        files=("app.json" "railway.json" "Procfile" "requirements.txt" ".env.example")
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done
        
        python -m json.tool app.json > /dev/null && echo "✅ app.json valid"
        python -m json.tool railway.json > /dev/null && echo "✅ railway.json valid"
        
        echo "✅ All deployment files validated"
